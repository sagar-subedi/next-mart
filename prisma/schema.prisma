generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  fileId    String
  fileUrl   String
  userId    String?   @unique @db.ObjectId
  shopId    String?   @unique @db.ObjectId
  productId String?   @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     users?    @relation(fields: [userId], references: [id])
  shops     shops?    @relation(fields: [shopId], references: [id])
  products  products? @relation(fields: [productId], references: [id])
}

model users {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String        @unique
  password  String?
  avatar    images?
  reviews   shopReviews[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  following String[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  shopId    String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLInks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  products      products[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model sellers {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  phone     String
  country   String
  password  String
  stripeId  String?
  shopId    String?    @db.ObjectId
  shop      shops?
  products  products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model siteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discountCodes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  publicName    String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum ProductStatus {
  Active
  Pending
  Draft
}

model products {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  detailedDescription  Json?
  warranty             String
  customSpecifications Json?
  customProperties     Json
  slug                 String        @unique
  tags                 String[]
  category             String
  subcategory          String
  cashOnDelivery       Boolean
  brand                String
  videoUrl             String?
  regularPrice         Float
  salePrice            Float
  stock                Int
  sellerId             String        @db.ObjectId
  seller               sellers       @relation(fields: [sellerId], references: [id])
  discountCodes        String[]      @db.ObjectId
  images               images[]
  colors               String[]
  sizes                String[]
  ratings              Float         @default(0)
  startingDate         DateTime?
  endingDate           DateTime?
  isDeleted            Boolean?      @default(false)
  deletedAt            DateTime?
  status               ProductStatus @default(Active)
  shopId               String        @db.ObjectId
  shop                 shops         @relation(fields: [shopId], references: [id])
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}
