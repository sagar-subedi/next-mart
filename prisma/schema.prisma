generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  fileId    String
  fileUrl   String
  usersId   String    @unique @db.ObjectId
  user      users     @relation(fields: [usersId], references: [id])
  shopId    String?   @unique @db.ObjectId
  productId String?   @unique @db.ObjectId
  shops     shops?    @relation(fields: [shopId], references: [id])
  products  products? @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model users {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String        @unique
  role      String        @default("user")
  password  String?
  reviews   shopReviews[]
  following String[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  orders    orders[]
  followers followers[]
  avatar    images?
}

model addresses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  label     String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean  @default(true)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  shopId    String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLInks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  products      products[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        orders[]
  followers     followers?
}

model sellers {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  phone     String
  country   String
  password  String
  stripeId  String?
  shopId    String?    @db.ObjectId
  shop      shops?
  products  products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model siteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model discountCodes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  publicName    String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum ProductStatus {
  Active
  Pending
  Draft
}

model products {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  detailedDescription  Json?
  warranty             String
  customSpecifications Json?
  customProperties     Json
  slug                 String        @unique
  tags                 String[]
  category             String
  subcategory          String
  cashOnDelivery       Boolean
  brand                String
  videoUrl             String?
  regularPrice         Float
  salePrice            Float
  stock                Int
  totalSales           Int           @default(0)
  sellerId             String        @db.ObjectId
  seller               sellers       @relation(fields: [sellerId], references: [id])
  discountCodes        String[]      @db.ObjectId
  images               images[]
  colors               String[]
  sizes                String[]
  ratings              Float         @default(0)
  startingDate         DateTime?
  endingDate           DateTime?
  isDeleted            Boolean?      @default(false)
  deletedAt            DateTime?
  status               ProductStatus @default(Active)
  shopId               String        @db.ObjectId
  shop                 shops         @relation(fields: [shopId], references: [id])
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model shopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  totalVisitors Int      @default(0)
  countryStats  Json?
  cityStats     Json?
  deviceStats   Json?
  lastVisitedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model uniqueShopVisitors {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  userId    String   @db.ObjectId
  visitedAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopId, userId])
}

model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String       @default("Ordered")
  items             orderItems[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model orderItems {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String
  quantity        Int
  price           Float
  selectedOptions Json?
  order           orders   @relation(fields: [orderId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum AddressType {
  HOME
  ADDRESS
  OTHER
}

model followers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  shopId    String   @unique @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  shop      shops?   @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId       String   @unique @db.ObjectId
  productId    String   @unique @db.ObjectId
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishlistAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model userAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique
  country         String?
  city            String?
  device          String?
  actions         Json?
  recommendations Json?
  lastVisited     DateTime
  lastTrained     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model notifications {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId    String   @db.ObjectId
  receiverId   String   @db.ObjectId
  redirectLink String?
  title        String
  message      String
  status       String   @default("Unread")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model conversationGroups {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  isGroup        Boolean  @default(false)
  name           String?
  creatorId      String   @db.ObjectId
  participantIds String[] @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model participants {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String    @db.ObjectId
  userId         String?   @db.ObjectId
  sellerId       String?   @db.ObjectId
  lastSeenAt     DateTime?
  isOnline       Boolean   @default(false)
  unreadCount    Int       @default(0)
  muted          Boolean   @default(false)
  joinedAt       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model messages {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  senderType     String
  content        String?
  attachments    String
  status         String   @default("Sent")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([content, conversationId, senderId, createdAt])
}
